{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://espeleta-c-hw3-refactor/./src/local-storage.ts","webpack://espeleta-c-hw3-refactor/./src/main.ts","webpack://espeleta-c-hw3-refactor/./src/search.ts","webpack://espeleta-c-hw3-refactor/./src/loader.ts"],"sourcesContent":["import { nameSearchRB, typeSearchRB } from './main';\n\n// saving and loading the last radio button selection from local storage\nconst saveLastRB = (radioButtonState:string) => {\n    localStorage.setItem(\"RB\", radioButtonState)\n}\nconst loadLastRB = () => {\n    let RB:string = localStorage.getItem(\"RB\");\n    if (RB) {\n        if (RB == \"Name\") {\n            nameSearchRB.checked = true;\n        }\n        if (RB == \"Type\") {\n            typeSearchRB.checked = true;\n        }\n    }\n}\n\n// saving and loading the last search term entered from local storage\nconst saveLastSearchTerm = (searchTerm:string) => {\n    localStorage.setItem(\"lastSearchTerm\", searchTerm);\n}\n\nconst loadLastSearchTerm = () => {\n    let lastSearchTerm:string = localStorage.getItem(\"lastSearchTerm\");\n    if (lastSearchTerm) {\n        const searchTerm:HTMLInputElement = document.querySelector(\"#searchterm\");\n        searchTerm.value = lastSearchTerm;\n    }\n}\n\nexport { saveLastRB, loadLastRB, saveLastSearchTerm, loadLastSearchTerm };","import * as storage from './local-storage';\nimport * as search from './search';\n\n// global variables\n// set variables for radio button selections\nlet nameSearchRB: HTMLInputElement;\nlet typeSearchRB: HTMLInputElement;\n// array of Pokemon types, will be used to create checkboxes and display and check Pokemon types\nlet types: Array<string> = [\"normal\", \"fire\", \"water\", \"grass\", \"electric\", \"ice\",\n    \"fighting\", \"poison\", \"ground\", \"flying\", \"psychic\", \"bug\", \"rock\",\n    \"ghost\", \"dragon\", \"dark\", \"steel\", \"fairy\"];\n\nconst searchButton: HTMLButtonElement = document.querySelector(\"#search\");\nconst instructions: HTMLParagraphElement = document.querySelector(\"p\");\nconst checkboxes: HTMLDivElement = document.querySelector(\"#checkboxes\");\nconst content: HTMLDivElement = document.querySelector(\"#content\");\nconst status: HTMLDivElement = document.querySelector(\"#status\");\nconst previousButton: HTMLButtonElement = document.querySelector(\"#previous\");\nconst nextButton: HTMLButtonElement = document.querySelector(\"#next\");\nconst searchTerm: HTMLInputElement = document.querySelector(\"#searchterm\");\n\nconst init = () => {\n    nameSearchRB = document.querySelector(\"input[value='name']\");\n    typeSearchRB = document.querySelector(\"input[value='type']\");\n\n    // display proper features and add event handlers\n    display();\n    // do searchButtonClicked function if the search button is clicked\n    searchButton.onclick = search.searchButtonClicked;\n    // load previously saved radio button and search term\n    storage.loadLastRB();\n    storage.loadLastSearchTerm();\n    // initialize what's displayed\n    // if the name search radio button is selected\n    if (nameSearchRB.checked) {\n        instructions.innerHTML = \"Type the name of a Pokémon!\"\n        checkboxes.style.display = \"none\";\n        searchTerm.style.display = \"block\";\n        content.innerHTML = \"\";\n        status.innerHTML = \"Ready to Search!\";\n    }\n    // if the type search radio button is selected\n    if (typeSearchRB.checked) {\n        instructions.innerHTML = \"Click on the checkboxes to filter through Pokémon of certain types!\"\n        checkboxes.style.display = \"block\";\n        searchTerm.style.display = \"none\";\n        previousButton.style.display = \"none\";\n        nextButton.style.display = \"none\";\n        content.innerHTML = \"\";\n        status.innerHTML = \"Ready to Search!\";\n    }\n    // create checkboxes for Pokemon type search feature\n    for (let type of types) {\n        let checkbox: HTMLLabelElement = document.createElement(\"label\");\n        checkbox.innerHTML = `<label for=\"${type}\">\n        <input type=\"checkbox\" id=\"${type}\" name=\"type\"> ${type}\n    </label>`\n        checkboxes.appendChild(checkbox);\n    }\n}\n\n// display different features depending on which radio button is clicked\nconst display = () => {\n    // also offer support for hitting enter key instead of pressing button\n    document.addEventListener('keypress', (e) => {\n        const keyName: string = e.key;\n        if (keyName === 'Enter') {\n            search.searchButtonClicked();\n        }\n    });\n    // if the name search radio button is clicked, hide the checkboxes and show the search bar\n    nameSearchRB.addEventListener(\"click\", () => {\n        checkboxes.style.display = \"none\";\n        searchTerm.style.display = \"block\";\n        content.innerHTML = \"\";\n        status.innerHTML = \"Ready to Search!\";\n        instructions.innerHTML = \"Type the name of a Pokémon!\"\n    });\n    // if the type search radio button is clicked, show checkboxes and hide everything else\n    typeSearchRB.addEventListener(\"click\", () => {\n        checkboxes.style.display = \"block\";\n        searchTerm.style.display = \"none\";\n        previousButton.style.display = \"none\";\n        nextButton.style.display = \"none\";\n        content.innerHTML = \"\";\n        status.innerHTML = \"Ready to Search!\";\n        instructions.innerHTML = \"Click on the checkboxes to filter through Pokémon of certain types!\"\n    });\n}\n\nconst getData = (url: string) => {\n    // create new XHR object\n    const xhr: XMLHttpRequest = new XMLHttpRequest();\n    // set onload handler\n    xhr.onload = dataLoaded;\n    // set onerror handler\n    xhr.onerror = dataError;\n    // open connections and send request\n    xhr.open(\"GET\", url);\n    xhr.send();\n}\n\nconst dataError = (e) => {\n    // when an error occurs\n    alert(\"An error occured.\");\n}\n\nconst dataLoaded = (e) => {\n    const xhr = e.target;\n    let obj: {name: string, id: number, types: {type:{name:string}}[]};\n    // try to turn object into parsable JS object\n    try {\n        obj = JSON.parse(xhr.responseText);\n    }\n    catch {\n        // if it doesn't work, change status, clear content, and return out of the function\n        status.innerHTML = \"<b> No results found! </b>\";\n        content.innerHTML = \"\";\n        console.clear();\n        return;\n    }\n    // setting pokemon info variables\n    let pokemonName: string = obj.name;\n    let pokemonId: number = obj.id;\n    let pokemonTypes: Array<string> = [];\n    // added a loop in the instance the pokemon has more than one type\n    for (let i = 0; i < obj.types.length; i++) {\n        pokemonTypes.push(obj.types[i].type.name);\n    }\n    // if the type search radio button is clicked\n    if (typeSearchRB.checked) {\n        // select all checked checkboxes\n        let checkboxes: NodeListOf<Element> = document.querySelectorAll('input[name=\"type\"]:checked')\n        let checkboxValues: Array<string> = [];\n        // add them all to an array\n        checkboxes.forEach((checkbox: Element) => {\n            checkboxValues.push(checkbox.id);\n        })\n        // check to see if a pokemon's type(s) includes the selected checkboxes\n        // EX: If the user selects the water checkbox,\n        // They can see a pokemon with a water and ground type combination.\n        // If the user selects the water and ground checkbox,\n        // They cannot see pokemon that only have the water type.\n        if ((checkboxValues.every(element => { return pokemonTypes.indexOf(element) != -1 })) && checkboxValues.length > 0) {\n            // grab sprite\n            let pokemonSprite: string = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`;\n            // generate result with pokemon info\n            let line: string = `<div class='result'><img src=${pokemonSprite} title='${pokemonName}'/>`;\n            line += `<br><span>${pokemonName.toUpperCase()}</span>`\n            line += `<br><span>#${pokemonId}</span><br>`\n            for (let i = 0; i < pokemonTypes.length; i++) {\n                line += `<span>${pokemonTypes[i].toUpperCase()}</span><br>`\n            }\n            // add to content\n            content.innerHTML += line;\n        }\n        // return out if no checkboxes were selected\n        if (checkboxValues.length > 0) {\n            return;\n        }\n    }\n    // if the name search radio button is selected\n    if (nameSearchRB.checked) {\n        // what happens when you click the previous and next buttons\n        const nextButtonClicked = () => {\n            // if on the last pokemon, prevent user from going further\n            if (obj.id == 1017) {\n                status.innerHTML = `<b> You can't go any further! </b>`;\n                return;\n            }\n            // grab data for next pokemon\n            getData(`https://pokeapi.co/api/v2/pokemon/${obj.id + 1}`)\n            // get rid of text in search bar\n            searchTerm.value = \"\";\n        }\n        const previousButtonClicked = () => {\n            // if on the first pokemon, prevent user from going further back\n            if (obj.id == 1) {\n                status.innerHTML = `<b> You can't go any further! </b>`;\n                return;\n            }\n            // grab data for previous pokemon\n            getData(`https://pokeapi.co/api/v2/pokemon/${obj.id - 1}`);\n            // get rid of text in search bar\n            searchTerm.value = \"\";\n        }\n        previousButton.onclick = previousButtonClicked;\n        nextButton.onclick = nextButtonClicked;\n        // grab sprite\n        let pokemonSprite: string = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`;\n        // generate result with pokemon info\n        let line: string = `<div class='result'><img src=${pokemonSprite} title='${pokemonName}'/>`;\n        line += `<br><span>${pokemonName.toUpperCase()}</span>`\n        line += `<br><span>#${pokemonId}</span><br>`\n        for (let i = 0; i < pokemonTypes.length; i++) {\n            line += `<span>${pokemonTypes[i].toUpperCase()}</span><br>`\n        }\n        // set it to content\n        content.innerHTML = line;\n        // update status (used to update status for previous and next buttons)\n        status.innerHTML = \"<b>Searching for \" + pokemonName.toUpperCase() + \"</b>\";\n    }\n}\n\nexport { nameSearchRB, typeSearchRB, previousButton, nextButton,status, content, getData, init };","import * as main from \"./main\";\nimport * as storage from \"./local-storage\";\n\n// function for what happens after the search button is clicked\nconst searchButtonClicked = () => {\n    //what the user searched for\n    let displayTerm:string = \"\";\n    // if the name search radio button is selected\n    if (main.nameSearchRB.checked) {\n        // save radio button selection to local storage\n        storage.saveLastRB(\"Name\");\n        // display previous and next buttons\n        main.previousButton.style.display = \"block\";\n        main.nextButton.style.display = \"block\";\n        // set up url\n        const SERVICE_URL:string = \"https://pokeapi.co/api/v2/pokemon/\";\n        let url:string = SERVICE_URL;\n        // grab term from search bar, trim and turn it to lower case (not case-sensitive)\n        const searchTerm:HTMLInputElement = document.querySelector(\"#searchterm\");\n        let term:string = searchTerm.value;\n        displayTerm = term;\n        term = term.trim();\n        term = term.toLowerCase();\n        term = encodeURIComponent(term);\n        // prompt the user for an input if there is nothing in the search bar\n        if (term.length < 1) {\n            main.status.innerHTML = \"<b> Please enter a search term! </b>\";\n            return;\n        }\n        // add term to url\n        url += term;\n        // save this to local storage\n        storage.saveLastSearchTerm(term);\n        // set status\n        main.status.innerHTML = \"<b>Searching for \" + displayTerm.toUpperCase() + \"</b>\";\n        // grab data from API with getData function and generated url\n        main.getData(url);\n    }\n    // if the type search radio button is selected\n    if (main.typeSearchRB.checked) {\n        // save radio button selection to local storage\n        storage.saveLastRB(\"Type\");\n        let checkboxes: NodeListOf<Element> = document.querySelectorAll('input[name=\"type\"]:checked');\n        let checkboxValues:Array<string> = [];\n        checkboxes.forEach((checkbox) => {\n            checkboxValues.push(checkbox.id);\n        })\n        // prompt user to check checkboxes if they checked none\n        if (checkboxValues.length == 0) {\n            main.status.innerHTML = \"<b>Please check checkboxes!</b>\";\n            main.content.innerHTML = \"\";\n            return;\n        }\n        // prompt user to check fewer checkboxes if they check more than 2\n        if (checkboxValues.length > 2) {\n            main.status.innerHTML = \"<b>Please check fewer checkboxes!</b>\";\n            main.content.innerHTML = \"\";\n            return;\n        }\n        // reset content results\n        main.content.innerHTML = \"\";\n        // set status\n        main.status.innerHTML = \"<b>Searching for \" + checkboxValues.toString().toUpperCase() + \" type Pokemon\" + \"</b>\";\n        // check for unused pokemon type combinations\n        if ((checkboxValues.indexOf('normal') != -1 && checkboxValues.indexOf('ice') != -1)\n            || (checkboxValues.indexOf('normal') != -1 && checkboxValues.indexOf('bug') != -1)\n            || (checkboxValues.indexOf('normal') != -1 && checkboxValues.indexOf('rock') != -1)\n            || (checkboxValues.indexOf('normal') != -1 && checkboxValues.indexOf('steel') != -1)\n            || (checkboxValues.indexOf('fire') != -1 && checkboxValues.indexOf('fairy') != -1)\n            || (checkboxValues.indexOf('ice') != -1 && checkboxValues.indexOf ('poison') != -1)\n            || (checkboxValues.indexOf('ground') != -1 && checkboxValues.indexOf('fairy') != -1)\n            || (checkboxValues.indexOf('bug') != -1 && checkboxValues.indexOf('dragon') != -1)\n            || (checkboxValues.indexOf('rock') != -1 && checkboxValues.indexOf('ghost') != -1)) {\n            main.status.innerHTML = \"<b>There are no Pokémon with this type combination!</b>\";\n            return;\n        }\n        // loop through all Pokemon for type data\n        for (let i = 1; i < 1018; i++) {\n            let url:string = `https://pokeapi.co/api/v2/pokemon/${i}`;\n            main.getData(url);\n        }\n    }\n}\n\nexport { searchButtonClicked };","import * as main from \"./main\";\nwindow.onload = () => {\n    main.init();\n}"],"names":["nameSearchRB","typeSearchRB","saveLastRB","radioButtonState","localStorage","setItem","searchButtonClicked","displayTerm","checked","style","display","url","term","document","querySelector","value","trim","toLowerCase","encodeURIComponent","length","innerHTML","searchTerm","toUpperCase","checkboxes","querySelectorAll","forEach","checkbox","push","id","toString","indexOf","i","types","searchButton","instructions","content","previousButton","nextButton","addEventListener","e","key","getData","xhr","XMLHttpRequest","onload","dataLoaded","onerror","dataError","open","send","alert","obj","target","JSON","parse","responseText","console","clear","pokemonName","name","pokemonId","pokemonTypes","type","every","element","pokemonSprite","line","onclick","window","RB","lastSearchTerm","getItem","createElement","appendChild"],"sourceRoot":""}